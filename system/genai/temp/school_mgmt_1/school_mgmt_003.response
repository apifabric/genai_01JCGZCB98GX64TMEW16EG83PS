{
    "models": [
        {
            "classname": "Student",
            "code": "class Student(db.Model):\n    \"\"\"description: Table to store student information.\"\"\"\n\n    __tablename__ = 'student'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    date_of_birth = db.Column(db.Date, nullable=True)\n    address = db.Column(db.String, nullable=True)\n    email = db.Column(db.String, nullable=True)\n    service_activity_count = db.Column(db.Integer, nullable=False, default=0)  # For LogicBank Rule\n\nclass Course(db.Model):\n    \"\"\"description: Table to store course information.\"\"\"\n\n    __tablename__ = 'course'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    title = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=True)\n\nclass Enrollment(db.Model):\n    \"\"\"description: Table to store enrollment information linking students and courses.\"\"\"\n\n    __tablename__ = 'enrollment'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n    course_id = db.Column(db.Integer, db.ForeignKey('course.id'), nullable=False)\n    enrollment_date = db.Column(db.Date, nullable=False)\n\nclass Activity(db.Model):\n    \"\"\"description: Table to store student activities.\"\"\"\n\n    __tablename__ = 'activity'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n\nclass Teacher(db.Model):\n    \"\"\"description: Table to store teacher information.\"\"\"\n\n    __tablename__ = 'teacher'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    hire_date = db.Column(db.Date, nullable=True)\n    expertise_area = db.Column(db.String, nullable=True)\n\nclass ClassSession(db.Model):\n    \"\"\"description: Table for each session of a class, linking courses and teachers.\"\"\"\n\n    __tablename__ = 'class_session'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    course_id = db.Column(db.Integer, db.ForeignKey('course.id'), nullable=False)\n    teacher_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=False)\n    start_date = db.Column(db.Date, nullable=False)\n    end_date = db.Column(db.Date, nullable=True)\n\nclass Evaluation(db.Model):\n    \"\"\"description: Table to store evaluations or grades for students enrolled in courses.\"\"\"\n\n    __tablename__ = 'evaluation'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    enrollment_id = db.Column(db.Integer, db.ForeignKey('enrollment.id'), nullable=False)\n    score = db.Column(db.Integer, nullable=False)\n    comments = db.Column(db.String, nullable=True)\n\nclass ExtracurricularActivity(db.Model):\n    \"\"\"description: Table to store information about extracurricular activities.\"\"\"\n\n    __tablename__ = 'extracurricular_activity'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=True)\n\nclass ActivityParticipation(db.Model):\n    \"\"\"description: Table linking students to extracurricular activities.\"\"\"\n\n    __tablename__ = 'activity_participation'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n    activity_id = db.Column(db.Integer, db.ForeignKey('extracurricular_activity.id'), nullable=False)\n    participation_date = db.Column(db.Date, nullable=False)\n\nclass Reward(db.Model):\n    \"\"\"description: Table to store information about rewards given to students.\"\"\"\n\n    __tablename__ = 'reward'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n    reward_name = db.Column(db.String, nullable=False)\n    issue_date = db.Column(db.Date, nullable=False)\n\nclass Department(db.Model):\n    \"\"\"description: Table to store department information.\"\"\"\n\n    __tablename__ = 'department'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    head_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=True)\n\nclass Subject(db.Model):\n    \"\"\"description: Table to store subjects managed by each department.\"\"\"\n\n    __tablename__ = 'subject'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=False)\n",
            "description": "Table to store student information and related attributes.",
            "name": "Student"
        },
        {
            "classname": "Course",
            "code": "class Course(db.Model):\n    \"\"\"description: Table to store course information.\"\"\"\n\n    __tablename__ = 'course'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    title = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=True)\n",
            "description": "Table to store course information and details.",
            "name": "Course"
        },
        {
            "classname": "Enrollment",
            "code": "class Enrollment(db.Model):\n    \"\"\"description: Table to store enrollment information linking students and courses.\"\"\"\n\n    __tablename__ = 'enrollment'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n    course_id = db.Column(db.Integer, db.ForeignKey('course.id'), nullable=False)\n    enrollment_date = db.Column(db.Date, nullable=False)\n",
            "description": "Table linking students to their courses.",
            "name": "Enrollment"
        },
        {
            "classname": "Activity",
            "code": "class Activity(db.Model):\n    \"\"\"description: Table to store student activities.\"\"\"\n\n    __tablename__ = 'activity'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n",
            "description": "Table to store various activities students engage in.",
            "name": "Activity"
        },
        {
            "classname": "Teacher",
            "code": "class Teacher(db.Model):\n    \"\"\"description: Table to store teacher information.\"\"\"\n\n    __tablename__ = 'teacher'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    hire_date = db.Column(db.Date, nullable=True)\n    expertise_area = db.Column(db.String, nullable=True)\n",
            "description": "Table for storing teacher information and related data.",
            "name": "Teacher"
        },
        {
            "classname": "ClassSession",
            "code": "class ClassSession(db.Model):\n    \"\"\"description: Table for each session of a class, linking courses and teachers.\"\"\"\n\n    __tablename__ = 'class_session'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    course_id = db.Column(db.Integer, db.ForeignKey('course.id'), nullable=False)\n    teacher_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=False)\n    start_date = db.Column(db.Date, nullable=False)\n    end_date = db.Column(db.Date, nullable=True)\n",
            "description": "Table to manage individual class sessions by linking courses with teachers.",
            "name": "ClassSession"
        },
        {
            "classname": "Evaluation",
            "code": "class Evaluation(db.Model):\n    \"\"\"description: Table to store evaluations or grades for students enrolled in courses.\"\"\"\n\n    __tablename__ = 'evaluation'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    enrollment_id = db.Column(db.Integer, db.ForeignKey('enrollment.id'), nullable=False)\n    score = db.Column(db.Integer, nullable=False)\n    comments = db.Column(db.String, nullable=True)\n",
            "description": "Table for storing evaluations or grades of students.",
            "name": "Evaluation"
        },
        {
            "classname": "ExtracurricularActivity",
            "code": "class ExtracurricularActivity(db.Model):\n    \"\"\"description: Table to store information about extracurricular activities.\"\"\"\n\n    __tablename__ = 'extracurricular_activity'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=True)\n",
            "description": "Table to store extracurricular activities available for students.",
            "name": "ExtracurricularActivity"
        },
        {
            "classname": "ActivityParticipation",
            "code": "class ActivityParticipation(db.Model):\n    \"\"\"description: Table linking students to extracurricular activities.\"\"\"\n\n    __tablename__ = 'activity_participation'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n    activity_id = db.Column(db.Integer, db.ForeignKey('extracurricular_activity.id'), nullable=False)\n    participation_date = db.Column(db.Date, nullable=False)\n",
            "description": "Table linking students to their participation in extracurricular activities.",
            "name": "ActivityParticipation"
        },
        {
            "classname": "Reward",
            "code": "class Reward(db.Model):\n    \"\"\"description: Table to store information about rewards given to students.\"\"\"\n\n    __tablename__ = 'reward'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)\n    reward_name = db.Column(db.String, nullable=False)\n    issue_date = db.Column(db.Date, nullable=False)\n",
            "description": "Table for storing rewards given to students.",
            "name": "Reward"
        },
        {
            "classname": "Department",
            "code": "class Department(db.Model):\n    \"\"\"description: Table to store department information.\"\"\"\n\n    __tablename__ = 'department'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    head_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=True)\n",
            "description": "Table storing information about various departments in the school.",
            "name": "Department"
        },
        {
            "classname": "Subject",
            "code": "class Subject(db.Model):\n    \"\"\"description: Table to store subjects managed by each department.\"\"\"\n\n    __tablename__ = 'subject'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String, nullable=False)\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=False)\n",
            "description": "Table storing subjects managed under departments.",
            "name": "Subject"
        }
    ],
    "rules": [
        {
            "name": "StudentActivityCount",
            "description": "Enforces that a student can only become an honor student if they have more than 2 service activities.",
            "use_case": "A student cannot be an honor student unless they have more than 2 service activities.",
            "code": "Rule.count(derive=Student.service_activity_count, as_count_of=Activity, where=lambda row: 'service' in row.name)\nRule.constraint(validate=Student,\n                as_condition=lambda row: row.is_honor_student and row.service_activity_count < 2,\n                error_msg=\"Honor Students must have at least 2 service activities\")"
        }
    ],
    "test_data": "# Test data creation\nfrom datetime import date\n\n# Students\nstudent1 = Student(name='Alice Smith', date_of_birth=date(2005, 4, 15), address='123 Maple St', email='alice@example.com', service_activity_count=3)\nstudent2 = Student(name='Bob Johnson', date_of_birth=date(2004, 11, 25), address='456 Oak Rd', email='bob@example.com', service_activity_count=1)\nstudent3 = Student(name='Charlie Brown', date_of_birth=date(2006, 7, 30), address='789 Pine Ave', email='charlie@example.com', service_activity_count=4)\nstudent4 = Student(name='Diana Green', date_of_birth=date(2005, 3, 12), address='246 Elm St', email='diana@example.com', service_activity_count=2)\n\n# Courses\ncourse1 = Course(title='Mathematics 101', description='Introduction to mathematics')\ncourse2 = Course(title='Biology 101', description='Basic biology concepts')\ncourse3 = Course(title='History 101', description='Survey of ancient civilizations')\ncourse4 = Course(title='Chemistry 101', description='Fundamentals of chemistry')\n\n# Enrollments\nenrollment1 = Enrollment(student_id=1, course_id=1, enrollment_date=date(2023, 1, 15))\nenrollment2 = Enrollment(student_id=1, course_id=2, enrollment_date=date(2023, 1, 16))\nenrollment3 = Enrollment(student_id=2, course_id=3, enrollment_date=date(2023, 1, 17))\nenrollment4 = Enrollment(student_id=3, course_id=4, enrollment_date=date(2023, 1, 18))\n\n# Activities\nactivity1 = Activity(name='School Play', description='Annual school play', student_id=1)\nactivity2 = Activity(name='Math Club', description='Weekly math club meetings', student_id=2)\nactivity3 = Activity(name='Science Fair', description='Annual science fair competition', student_id=3)\nactivity4 = Activity(name='Basketball Team', description='School basketball team', student_id=4)\n\n# Teachers\nteacher1 = Teacher(name='Ms. Thompson', hire_date=date(2000, 5, 20), expertise_area='Mathematics')\nteacher2 = Teacher(name='Mr. Wilson', hire_date=date(1998, 9, 10), expertise_area='Biology')\nteacher3 = Teacher(name='Mrs. Lee', hire_date=date(2005, 3, 5), expertise_area='History')\nteacher4 = Teacher(name='Dr. Patel', hire_date=date(2010, 1, 15), expertise_area='Chemistry')\n\n# Class Sessions\nclass_session1 = ClassSession(course_id=1, teacher_id=1, start_date=date(2023, 2, 1), end_date=date(2023, 6, 1))\nclass_session2 = ClassSession(course_id=2, teacher_id=2, start_date=date(2023, 2, 5), end_date=date(2023, 6, 5))\nclass_session3 = ClassSession(course_id=3, teacher_id=3, start_date=date(2023, 2, 10), end_date=date(2023, 6, 10))\nclass_session4 = ClassSession(course_id=4, teacher_id=4, start_date=date(2023, 2, 15), end_date=date(2023, 6, 15))\n\n# Evaluations\nevaluation1 = Evaluation(enrollment_id=1, score=95, comments='Excellent performance')\nevaluation2 = Evaluation(enrollment_id=2, score=88, comments='Very good performance')\nevaluation3 = Evaluation(enrollment_id=3, score=76, comments='Satisfactory performance')\nevaluation4 = Evaluation(enrollment_id=4, score=82, comments='Good performance')\n\n# Extracurricular Activities\nextracurricular1 = ExtracurricularActivity(name='Chess Club', description='School chess club')\nextracurricular2 = ExtracurricularActivity(name='Debate Team', description='School debate team')\nextracurricular3 = ExtracurricularActivity(name='Robotics Club', description='Robotics and engineering projects')\nextracurricular4 = ExtracurricularActivity(name='Art Club', description='School art club activities')\n\n# Activity Participation\nparticipation1 = ActivityParticipation(student_id=1, activity_id=1, participation_date=date(2023, 3, 12))\nparticipation2 = ActivityParticipation(student_id=2, activity_id=2, participation_date=date(2023, 3, 15))\nparticipation3 = ActivityParticipation(student_id=3, activity_id=3, participation_date=date(2023, 3, 20))\nparticipation4 = ActivityParticipation(student_id=4, activity_id=4, participation_date=date(2023, 3, 25))\n\n# Rewards\nreward1 = Reward(student_id=1, reward_name='Honor Roll', issue_date=date(2023, 5, 1))\nreward2 = Reward(student_id=2, reward_name='Perfect Attendance', issue_date=date(2023, 5, 2))\nreward3 = Reward(student_id=3, reward_name='Science Award', issue_date=date(2023, 5, 3))\nreward4 = Reward(student_id=4, reward_name='Sportsmanship Award', issue_date=date(2023, 5, 4))\n\n# Departments\ndepartment1 = Department(name='Mathematics Department', head_id=1)\ndepartment2 = Department(name='Biology Department', head_id=2)\ndepartment3 = Department(name='History Department', head_id=3)\ndepartment4 = Department(name='Chemistry Department', head_id=4)\n\n# Subjects\nsubject1 = Subject(name='Algebra', department_id=1)\nsubject2 = Subject(name='Genetics', department_id=2)\nsubject3 = Subject(name='World History', department_id=3)\nsubject4 = Subject(name='Organic Chemistry', department_id=4)",
    "name": "school_mgmt"
}